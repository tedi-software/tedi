# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# key options
#  
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

# allow tedi to use keys that were not encrypted
allow.unecrypted.keys = true


#
# enable verbose logging
# 
# *** WARNING ***  - this will log the system passwords
debug = true




# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# system keys
# 
# read from environment variables or stdin (or both)
#
# - system keys must be [base64|hex] encoded AES Keys (16|24|32 bytes)
#
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

# read keys from stdin
# expected format: alias=value
#  e.g. "sys1=1234567890; sys2=abcdefghi; sys3=fatcatsgobbledogsandeatbats"
# 
#  note: the first = is assumed to be the delimiter
system.key.read.from.stdin = false

# read from environment variables
0.system.key.alias=tedi_mp_20211230_01
0.system.key.envvar.name=SYS1

1.system.key.alias=tedi_mp_20211230_02
1.system.key.envvar.name=SYS2

2.system.key.alias=tedi_mp_20211230_03
2.system.key.envvar.name=SYS3

3.system.key.alias=tedi_mp_20220430_0
3.system.key.envvar.name=SYS4

4.system.key.alias=tedi_mp_20220430_1
4.system.key.envvar.name=SYS5

5.system.key.alias = tedi_mp_20211230_05
5.system.key.envvar.name = SYS6

6.system.key.alias = tedi_mp_20211230_06
6.system.key.envvar.name = SYS7





# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# list of rsa keys to load from file
#
# - RSA keys must be PKCS1 format
#   e.g. generate key pairs via:
#        openssl genrsa -aes256 -out private.key 2048
#        openssl rsa -in private.key -pubout -out key.pub
#  
#        
#
# - format must be: Base64 encoded (PEM) 
#   
#   to convert openssh -> pem: 
#         1. public key:  ssh-keygen -f id_rsa.pub -e -m pem > id_rsa.pem to 
#         2. private key: ssh-keygen -e -p -P srmTG304y -N srmTG304y -f id_rsa.priv -m pem
#             - note: the private key is overwritten
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
0.rsa.private.key.name = key_20220423.key
0.rsa.private.key.passphrase = "$aes-256-cbc$hex$d4a0882d73f740461379a7dfaf5fa643$fc0f0c30d2d2bda078799981ed19505d"
0.rsa.private.key.system.key.alias = tedi_mp_20220430_0
0.rsa.public.key.name = key_20220423.pub

# 1.rsa.private.key.name = id_rsa.priv
# 1.rsa.private.key.passphrase = "$aes-128-ctr$hex$dd629e5112d49eb3b49acc3583c8cac5$4a23d96a46b2de20995ed5ac"
# 1.rsa.private.key.system.key.alias = tedi_mp_20220430_1
# 1.rsa.public.key.name = id_rsa.pub.pem





# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# aes keys
#
# - aes keys do not live in separate physical files
# - aes keys are used with http signature and jwt authentication
#   - httpsig and jws could use a non-aes key value here...just can't use it for actual aes enc/dec ops
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
0.aes.key.name = key0_20220423.key
0.aes.key.passphrase = "$aes-256-ctr$hex$5ef63f671e08aa2b6c73d413a7e6f711$87e56ee515cdb2187eabe00fcc0c32"
0.aes.key.system.key.alias = tedi_mp_20211230_02

1.aes.key.name = key1_20220423.key
1.aes.key.passphrase = "$aes-256-ctr$hex$f97ac7e296d5eb1c365ae55845e1e865$1190b886896a94b00df5"
1.aes.key.system.key.alias = tedi_mp_20211230_03

2.aes.key.name = system_key_0.key
2.aes.key.passphrase = "$aes-256-ctr$hex$d3449e73b52abe4712b2bc5dbfd7543e$ebc385056c0be7c69600f556b915060f83d62f671316ee98ee1b908236e5213486a23f103b7c0b36c3acaa1771babb74c616cb003ca3fa039839c42e8043f467"
2.aes.key.system.key.alias = tedi_mp_20211230_03