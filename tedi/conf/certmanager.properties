# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# ssl / certificate options
#  
# - this settings are the default settings for tls connections
# - it's assumed all keys are password protected
# - all certificates and cert/key pairs must be explicity configured here - TEDI
#   will not blindly load all certs that are found in the keys directory
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

# enable verbose logging
debug = true

# enable tls
tls=true

# set min version of TLS supported (tls1.0, tls1.2, tls1.3)
tls.min.version=tls1.2

# supported cipher suites (leave empty to accept golang defaults)
# e.g. TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
tls.cipher.suites=

# tls curve preferences (leave empty to accept golang defaults)
# e.g. CurveP256, CurveP384, CurveP521
tls.curve.preferences=

# controls whether a client verifies the server's certificate chain and host name.
tls.verify=true

# use ocsp revocation checking
tls.ocsp=false


# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# list of certificates TEDI should trust and use to verify client certs 
# - e.g. when acting as a client for http requests or for cert verification for mutual-TLS
#
# - certs are loaded from tedi/keys/
# - pem encoding is required
#
#
# cert.pinning
# - after chain verification is complete, apply a 2nd level of trust
# - set true when wanting to ensure that a cert is truly trusted by TEDI and not because
#   the presented cert simply shares the same issuer (i.e. rootCA signs both cert A and B and you want to trust B but not A)
# - if enabled, it applies holistically, i.e. you must explicity trust every certificate (can be root, intermediate, leaf)
# - TEDI pins to the public key of the certificate
#
# - root certs / trust anchors
#   - list of trust anchors, root certs to trust
#   - if not set, the system roots are used
#   - a file may contain more than one root cert (bundle)
#   - do not configure non-roots certs as roots (you'll short-circuit chain verification) !
#
# - intermediate certs
#   - a list of intermediate certs to trust
#   - a file may contain more than one (bundle)
#
#
# trust.cert.name
# - list of certificates TEDI explicity trusts - corresponds to cert.pinning setting
#   and for cert authentication
#
#
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
cert.pinning = false

0.root.ca=simplehttp_ca.pem

0.intermediate.cert=""

0.trust.cert=simplehttp.pem
1.trust.cert=outside.company.com.pem



# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# list of private cert/key pairs (for client cert auth)
#
# - pem encoding is required
# - default path is {root-dir}/trust
# - A Certificate is a chain of one or more certificates, leaf first.
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
0.cert.name=outside.company.com.pem
0.cert.key.name=outside.company.com.key
0.cert.key.passphrase="$aes-256-cbc$hex$db44771d37d799cd77cc6fcf340eae7f$681dea9a0cd43747fd53b55dad20a449"
0.cert.key.system.key.alias=tedi_mp_20220430_1