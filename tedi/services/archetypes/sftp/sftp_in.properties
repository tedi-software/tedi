# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# sftp inbound service properties
#
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
service.type = sftpin

# include common service properties
.include = ./inc_common.properties

# administrative API auth scheme
admin.api.auth.scheme = jws

# how often to check (poll) for new files
schedule = 5m

# instead of delivering the actual data file, deliver a file that points to it
use.file.pointers = true


# max number of files to download at a time per receive operation
max.files = 10

# -----------------------------------------------------------------------------
# ftp server info
# -----------------------------------------------------------------------------
#
# - configure sftp server's public key either directly or in known_hosts
#   - if configured in known_hosts (server.properties), the host entry in known hosts must match the ftp site's hostname
#     - known_hosts is read for every new connection attempt
# -----------------------------------------------------------------------------
ftp.server.name = sftp.com
ftp.server.port = 22
ftp.server.public.key = ""
ftp.server.time.offset = 0h

# the directory to search for files to download (assumes / if empty)
ftp.server.dir = /tedi/out/tmp/tx_a/


# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# locking
#
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# prior to receiving, a lock must be acquired
# if using renaming, the lock is released after the file(s) is renamed
use.locks = false

# allow the service to run even if it can't acquire a lock (try; continue on failure)
# use.soft.locks = false

# which key value store to use as a global lock (configured in nats_kvs.properties)
kvs.name = global-lock


# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# candidate file detection
#
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# a list of regular expressions to detect new files to receive (uses OR logic)
#  - required
#  - wrap in quotes
#  - string is interpreted as a string literal
#  - https://pkg.go.dev/regexp/syntax
filename.include.regex = "^.+\.dat$"

# a list of regular expressions to filter out files from being received (uses AND NOT logic with includes)
# ignored if empty
# https://pkg.go.dev/regexp/syntax
filename.exclude.regex = ""

#  reformat/rename files after download
local.filename.formatter = {COPY}


# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# state management
#
# 
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
file.state.rename.enabled = true
file.state.rename.formatter.starting = {COPY}.processing
file.state.rename.formatter.finished = {COPY}.success
file.state.rename.formatter.failed = {COPY}

# use a "status" file to keep state 
file.state.status.file.enabled = false

# used to identify actual file name relative to status file name
file.state.status.file.formatter = {BASENAME}.dat


# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# purging
#
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
purge.enabled = true

purge.kvs.name = ftp-purge

# delete files successfully received after duration N (set to 0 to delete after pickup)
purge.file.max.age = 1d

# frequency at which to check for files to delete
purge.schedule = 2h

# regex for identifying files to delete (you must define the include regex)
# https://pkg.go.dev/regexp/syntax
purge.filename.include.regex = "^.+\.ip.done$"
purge.filename.exclude.regex = ""

# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# abandoned-files check
#
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
# run a check for files that have been left in a "processing" state
abandon.check.enabled = true

abandon.check.kvs.name = ftp-abandon-check

# how often to run the check
abandon.check.schedule = 2h

# how long the file has been in the processing state (> max.age triggers an alert)
abandon.check.max.age = 2m

# enables renaming the file so it will be picked up again 
abandon.check.rename.enabled = true

# how to identify abandoned files
# https://pkg.go.dev/regexp/syntax
abandon.check.include.regex = "^.+\.txt.processing$"

# how to rename the file
abandon.check.filename.formatter = {BASENAME}.dat



# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#
# sftp authentication methods (ssh auth: username/password or username/key)
#
#  sftp.client.auth = [basic | ssh-key]
#  system.password.alias specifies the system key used to encrypt & encode the password
# *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
sftp.client.auth = ssh-key

# -----------------------------------------------------------------------------
# basic auth
# -----------------------------------------------------------------------------
#
# - password must be encrypted and encoded
# -----------------------------------------------------------------------------
# basic.auth.username = "tedi"
# basic.auth.password= "$aes-128-ctr$hex$cf810a8ab64bc9911de98f89237e9d5b$36f7b9baf658f64849da"
# basic.auth.system.key.alias = tedi_mp_20220430_1


# -----------------------------------------------------------------------------
# key auth
# -----------------------------------------------------------------------------
#
# rsa is the only supported key type (you must convert openssh format to pem)
# -----------------------------------------------------------------------------
key.auth.username = "tedi_qa"
key.auth.client.private.key = id_rsa.priv



# -----------------------------------------------------------------------------
# ssh connection settings
# -----------------------------------------------------------------------------
#
# - setting validate.server.host.key=false is insecure (no trust verification)
# - ssh.key.exchange.algos: curve25519-sha256
#                           curve25519-sha256@libssh.org 
#                           ecdh-sha2-nistp256
#                           ecdh-sha2-nistp384
#                           ecdh-sha2-nistp521
#                           diffie-hellman-group14-sha256
#                           diffie-hellman-group14-sha1
# - ssh.ciphers:            aes128-gcm@openssh.com
#                           chacha20Poly1305ID 
#                           aes128-ctr 
#                           aes192-ctr 
#                           aes256-ctr
# - ssh.macs:               hmac-sha2-256-etm@openssh.com
#                           hmac-sha2-256
#                           hmac-sha1
#                           hmac-sha1-96
# - ssh.host.key.algos:     rsa-sha2-512-cert-v01@openssh.com
#                           rsa-sha2-256-cert-v01@openssh.com
#                           ssh-rsa-cert-v01@openssh.com
#                           ssh-dss-cert-v01@openssh.com
#                           ecdsa-sha2-nistp256-cert-v01@openssh.com
#                           ecdsa-sha2-nistp384-cert-v01@openssh.com
#                           ecdsa-sha2-nistp521-cert-v01@openssh.com
#                           ssh-ed25519-cert-v01@openssh.com
#                           ecdsa-sha2-nistp256
#                           ecdsa-sha2-nistp384
#                           ecdsa-sha2-nistp521
#                           rsa-sha2-512
#                           rsa-sha2-256
#                           ssh-rsa
#                           ssh-dss
#                           ssh-ed25519
#
#  leave empty to accept defaults (above)
# -----------------------------------------------------------------------------
ssh.validate.server.host.key = true
ssh.key.exchange.algos = ""
ssh.ciphers = "" 
ssh.macs = ""
ssh.host.key.algos = ""
ssh.connection.timeout = 30s
ssh.debug = true
