# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# JetStream Pull Consumer Settings
#
#
# ===========================================================================================================================================================================
# Setting                                     Required    Description                                        
# ===========================================================================================================================================================================
# stream_name                                 yes         the stream the consumer belongs to
# durable_name                                yes         consumer name
# description                                 no           
# deliver_policy                              yes         determines how the consumer should select the first message to deliver
#                                                         - all                       (default) starts delivering messages from the very beginning of a stream
#                                                         - last                      start the consumer with the last sequence received
#                                                         - new                       will only deliver new messages that are sent after the consumer is created
#                                                         - by_start_sequence         deliver messages starting from a given sequence
#                                                         - by_start_time             deliver messages starting from a given datetime
#                                                         - last_per_subject          start the consumer with the last message for all subjects received
#
# opt_start_seq                               *yes        starting sequence number if using "by_start_sequence" deliver policy
# opt_start_time                              *yes        starting datetime if using "by_start_time" delivery policy
#
# ack_policy                                  yes         determines how the consumer should acknowledge delivered messages
#                                                         - none      requires no acks for delivered messages
#                                                         - all       when acking a sequence number, this implicitly acks all sequences below this one as well
#                                                         - explicit  requires ack or nack for all messages
# 
# ack_wait                                    yes         sets the maximum amount of time we will wait for an ack
# max_deliver                                 yes         sets the number of redeliveries for a message
#
#
# replay_policy                               yes         determines how the consumer should replay messages it already has queued in the stream
#                                                         - instant    replay messages as fast as possible.
#                                                         - original   will maintain the same timing as the messages were received
#
# rate_limit_bps                              no          Bits per sec rate limit applied to a push consumer.
#
# max_waiting                                 no          defines the max inflight pull requests
# max_ack_pending                             no          sets the number of outstanding acks that are allowed before message delivery is halted.
#
# flow_control                                no          enables flow control for a push based consumer
#
# idle_heartbeat                              no          enables push based consumers to have idle heartbeats delivered.
# headers_only                                no          will instruct the consumer to only deliver headers and no payloads
#
#
# pull options:
#  max_batch                                  yes         sets the max messages per fetch
#  max_expires                                yes         sets the maximum pull consumer request expiration that a Fetch() can request (using the Fetch's timeout value)
#  max_bytes                                  no          sets the maximum pull consumer request bytes that a Fetch() can receive
#
#
#
# note: use "-1" to use the default value from the client sdk
# 
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

js.consumer.stream_name           = "nats-in-pull"
js.consumer.durable_name          = "tedi"
js.consumer.description           = "nats pull test"
js.consumer.deliver_policy        = all
js.consumer.opt_start_seq         = -1
js.consumer.opt_start_time_layout = "Jan 2, 2006 at 3:04pm (MST)"
js.consumer.opt_start_time_value  = "Feb 4, 2014 at 6:05pm (PST)"
js.consumer.ack_policy            = explicit
js.consumer.ack_wait              = 2m
js.consumer.max_deliver           = -1
js.consumer.replay_policy         = instant
js.consumer.filter_subject        = "tedi"
js.consumer.sample_freq           = -1
js.consumer.max_waiting           = -1
js.consumer.max_ack_pending       = 100
js.consumer.headers_only          = false
js.consumer.max_batch             = 10
js.consumer.max_expires           = 0s
js.consumer.max_bytes             = -1
