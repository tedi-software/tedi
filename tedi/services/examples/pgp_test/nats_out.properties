# ----------------------------------------------------------------------------
#
# nats publisher service
#
# ----------------------------------------------------------------------------
service.type = "natsout"

# include common properties
.include = ./inc_common.properties


# administrative API auth scheme
admin.api.auth.scheme = jws


# -----------------------------------------------------------------------------
# nats publisher modes
#
# core_ack         - publish and wait for ack
# core_no_ack      - publish without ack
# jetstream        - publish to jetstream and wait for ack
# -----------------------------------------------------------------------------
publish.mode = "jetstream"

# jetstream properties
conn.name = local-USR-0000-1

# stream properties
.include = ./inc_nats_js_stream.properties

# create (or update) the stream if it doesn't exist
create.stream = true

# subscription settings
js.prefix=""


# -----------------------------------------------------------------------------
# list of headers to log for each message published (for traceability)
# to log them all use *
# 
# e.g. log.headers = "content-encoding, requestid, marker"
# -----------------------------------------------------------------------------
log.headers = *



# -----------------------------------------------------------------------------
# message subject
#
# value: subject value
# source: where to source the value: 
#        - static: value is the source
#        - goodybag: dto
#        - jpath: jpath expression to run against the content
#        - xpath: xpath expression to run against the content
# required: true/false
#           - toss an error if the value is empty
#           - default: false
# -----------------------------------------------------------------------------
message.subject.value   = "tedi"
message.subject.source  = "static"



# -----------------------------------------------------------------------------
# nats message headers
#
# name: header name
# value: header value
# source: where to source the value: 
#        - static: value is the source
#        - goodybag: dto
#        - jpath: jpath expression to run against the content
#        - xpath: xpath expression to run against the content
# required: true/false
#           - toss an error if the value is empty
#           - default: false
# -----------------------------------------------------------------------------
0.message.header.name    = "content-type"
0.message.header.value   = "application/json"
0.message.header.source  = "static"
1.message.header.name    = "content-encoding"
1.message.header.value   = "identity"
1.message.header.source  = "static"
2.message.header.name    = "accept-encoding"
2.message.header.value   = "identity"
2.message.header.source  = "static"
3.message.header.name    = "tedi-file-pointer"
3.message.header.value   = "true"
3.message.header.source  = "static"


# -----------------------------------------------------------------------------
# publish a reference/file-pointer to the actual file on disk
#
# - use this header when you have a message body greater than the max size allowed by NATS.
# 
# -----------------------------------------------------------------------------
#2.message.header.name    = "tedi-file-pointer"
#2.message.header.value   = "true"
#2.message.header.source  = "static"

# -----------------------------------------------------------------------------
# compress the message prior to publishing
#
# - use this header when you have a message body greater than the max size allowed by NATS.
# - supported algorithms: gzip, zlib
# -----------------------------------------------------------------------------
#2.message.header.name    = "content-encoding"
#2.message.header.value   = "gzip"
#2.message.header.source  = "static"

# -----------------------------------------------------------------------------
# extract a value from the json 
# -----------------------------------------------------------------------------
# 3.message.header.name    = "id"
# 3.message.header.value   = "//menu/id/text()"
# 3.message.header.source  = "jpath"
# 3.message.header.required = true