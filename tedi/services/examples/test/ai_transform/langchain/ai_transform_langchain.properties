service.type=ai_transform_langchain

# include common settings
.include = ./inc_common.properties

# reference HTTP service settings
sub.service.type.config = ./inc_http.properties


# Chain name to invoke on the LangChain server
langchain.chain.name = "default"

# Controls randomness (0 = deterministic, 1 = creative)
langchain.temperature = 0.7

# Nucleus sampling (0â€“1); often left at 1.0
langchain.top.p = 1.0

# Limit token output (helps cost, latency)
langchain.max.tokens = 1000

# This controls how the AI service formats its response.
# text | json_object 
langchain.response.format = json_object

# format to extract from the response [json, xml, csv, raw, regex]
# leave empty for auto-detect 
langchain.response.output.format = "xml"

# If using regex, this is the pattern to extract the desired content.
langchain.response.output.format.regex = ""
langchain.response.output.format.regex.group = ""

# use prompt templating
# This allows the use of templated prompts in the AI service.
# If set to false, the service will use a fixed prompt.
# If set to true, the service will use a templated prompt.
langchain.prompt.templated = false

# log the prompt (for debugging)
langchain.log.prompt = true

# The prompt to use for the LangChain service
langchain.prompt = "Convert this JSON to XML. Rules: 1) Output ONLY XML 2) No explanations 3) No code examples"

# Example templated prompt (when langchain.prompt.templated = true):
# langchain.prompt = "Given this customer:"                                            \
#           "\n - ID: {{.id}}"                                               \
#           "\n - Name: {{.name | title}}"                                   \
#           "\n - Email: {{.email | lower}}"                                 \
#           "\n - Spend: ${{.spend}}"                                        \
#           "\n - Last active: {{.last_active | formatDate \"Jan 2, 2006\"}}"  \
#           "\n"                                                             \
#           "Classify them into a segment (bronze, silver, gold) and return JSON with keys: segment, comment."