# -----------------------------------------------------------------------------
# 
# http out service options for LangChain HTTP API
#
# -----------------------------------------------------------------------------
service.type = "httpout"

# include common settings
.include = ./inc_common.properties

# LangChain server configuration
http.scheme=http
http.hostname=localhost
http.port=8000

# http verb (case insensitive)
http.method = post

# target URL for LangChain API (typically /chain/invoke or /chain/stream)
# use /{http.path.param.name}/ to dynamically set path parameters
http.url = chain/invoke

# list of non-2xx response codes that will not cause an alert
http.suppress.status.codes = "-1,400,404,408,503,504"

# list of response codes that are non-retryable
http.fatal.status.codes = "400,401,403,404,423,429"

# max time to wait to establish the connection
http.connection.timeout=30s

# max allowable open connections to the target host:port
http.max.connections = 100

# max time to wait before timing out the read
http.read.timeout = 500s

# max time to wait for the full request to be written
http.write.timeout =500s

# absolute max time to wait for the entire request / response to complete
#  set to 0 to disable; 
#  use judiciously: on a timeout, the req itself still runs to completion in the background
#  no retries
http.absolute.timeout = 0s

# security settings
# leave empty to accept defaults
http.tls.version=tls1.2
http.tls.cipher.suites=
http.tls.curve.preferences=
http.tls.insecureskipverify=true

# return the response to the caller
http.return.response = true

# list of headers from the response to return to the caller
http.return.headers = x-correlation-id,x-request-id

# -----------------------------------------------------------------------------
# headers
#
# name: header name
# value: header value
# source: where to source the value: 
#        - static: value is the source
#        - goodybag: dto
#        - jpath: jpath expression to run against the content
#        - xpath: xpath expression to run against the content
# required: true/false
#           - toss an error if the value is empty
#           - default: false
# canonicalize: true/false
#               - canonicalize header names, e.g. content-type -> Content-Type
#               - default false
# -----------------------------------------------------------------------------
0.http.header.name    = "content-type"
0.http.header.value   = "application/json"
0.http.header.source  = "static"
1.http.header.name    = "content-encoding"
1.http.header.value   = "identity"
1.http.header.source  = "static"

# -----------------------------------------------------------------------------
# query params
#
# name/value/source see above
# -----------------------------------------------------------------------------
# 0.http.query.param.name   = ""
# 0.http.query.param.value  = ""
# 0.http.query.param.source = ""


# -----------------------------------------------------------------------------
# path params
#
# name/value/source see above
# -----------------------------------------------------------------------------
# 0.http.path.param.name    = ""
# 0.http.path.param.value   = ""
# 0.http.path.param.source  = "goodybag"



# -----------------------------------------------------------------------------
# authentication
#
# supported auth types: 
#   - none
#   - basic auth
#   - certificate
#   - jws (jwt)
#   - http signature
#.  - bearer token
# -----------------------------------------------------------------------------
http.client.auth = none


# -----------------------------------------------------------------------------
# basic auth
# - password must be encrypted and encoded
# - system.password.alias specifies the system key used to encrypt & encode the password
# -----------------------------------------------------------------------------
# http.client.auth = basic
# basic.auth.username = "tedibear01"
# basic.auth.password= "$aes-256-ctr$hex$1e7820c8cf148858ed9482c37e719458$926a0e4f8d90878e83b13029758f2f0f5d"
# basic.auth.system.key.alias = tedi_mp_20220430_1


# -----------------------------------------------------------------------------
# http signature
#
# - key name: physical key name
# - keyid: maps to the keyId in the signature
# - headers: headers use to create the signature...anything beyond (request-target),date, digest
#            must come from an actual header set in the request
# -----------------------------------------------------------------------------
# http.client.auth = httpsig
# httpsig.debug = true
# httpsig.key.name = key1_20220423.key
# httpsig.key.id = tedi:tedi-nprod-20201211
# httpsig.digest.algo = sha-256
# httpsig.signing.algo = hmac-sha256
# httpsig.headers = "(request-target),Date,Digest"


# -----------------------------------------------------------------------------
# jwt auth
# 
# Json Web Signature (JWS)
# 
# - algo: RS256|RS384|RS512|PS256|PS384|PS512|HS256|HS384|HS512
# 
# -----------------------------------------------------------------------------
# http.client.auth = jws
jws.debug = true

# RSA
# jws.algo = RS256
# jws.private.key.name=key_20220423.key
# jws.public.key.name=key_20220423.pub
# jws.header.kid = tedi:tedi-nprod-20220709-pub-key

# jws.algo = RS256
# jws.private.key.name=key_20220423.key
# jws.cert.name = outside.company.com.pem
# jws.header.kid = tedi:tedi-nprod-20220709-pub-key



# HMAC
jws.algo = HS256
jws.key.name = key1_20220423.key
jws.header.kid = tedi:tedi-nprod-20220709

# static / custom claims
jws.claim.0.name = "fluffy"
jws.claim.0.value = "bunny"

# issuer - default: tedi
jws.claim.iss = tedi

# audience - default: not set if empty
jws.claim.aud = tedi

# subject/user - default: tedi
jws.claim.sub = tedi

# expiration - duration jwt is valid for (now + exp)
jws.claim.exp = 300s

# unique identifier - default: RequestId
jws.claim.jti = 


# -----------------------------------------------------------------------------
# certificate auth
# -----------------------------------------------------------------------------
# http.client.auth = cert
cert.name = "outside.company.com.pem"



# -----------------------------------------------------------------------------
# Bearer Token
# -----------------------------------------------------------------------------
# http.client.auth = bearer-token
bearer.token= "your bearer token encrypted via crypto-buddy"
bearer.token.system.key.alias = tedi_mp_20220430_1